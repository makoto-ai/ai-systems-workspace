name: Daily KPI Slack Summary

"on":
  schedule:
    - cron: '0 0 * * *'  # Daily 09:00 JST (00:00 UTC)
  workflow_dispatch: {}

jobs:
  daily-summary:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: daily-slack-summary
      cancel-in-progress: true
    env:
      PYTHON_VERSION: '3.11'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore KPI history cache
        uses: actions/cache/restore@v4
        with:
          path: out/kpi_history.jsonl
          key: kpi-history-${{ github.run_id }}
          restore-keys: |
            kpi-history-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies (pinned)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt

      - name: Generate latest KPI and Gate summary
        run: |
          python scripts/quality/golden_coverage_report.py | tee golden_report.txt
          python scripts/quality/dynamic_gates.py --summary | tee gate_summary.txt

      - name: Save KPI history cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: out/kpi_history.jsonl
          key: kpi-history-${{ github.run_id }}

      - name: Post Slack (daily summary)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python - <<'PY'
          import json, os
          if not os.environ.get('SLACK_WEBHOOK_URL'):
              print('No SLACK_WEBHOOK_URL configured; skip posting.')
              raise SystemExit(0)
          def read(p):
              try:
                  with open(p, 'r', encoding='utf-8') as f:
                      return f.read()
              except Exception:
                  return ''
          golden = read('golden_report.txt')
          gate = read('gate_summary.txt')
          payload = {
              "text": "Daily KPI Summary",
              "blocks": [
                  {"type":"header","text":{"type":"plain_text","text":"Daily KPI Summary"}},
                  {"type":"section","text":{"type":"mrkdwn","text":f"*Golden Coverage (latest)*\n```{golden}```"}},
                  {"type":"section","text":{"type":"mrkdwn","text":f"*Dynamic Gates*\n```{gate}```"}},
                  {"type":"context","elements":[{"type":"mrkdwn","text":f"run: {os.environ.get('GITHUB_RUN_ID','')} | repo: {os.environ.get('GITHUB_REPOSITORY','')}"}]}
              ]
          }
          import urllib.request
          req = urllib.request.Request(os.environ['SLACK_WEBHOOK_URL'], data=json.dumps(payload).encode('utf-8'), headers={'Content-Type':'application/json'})
          with urllib.request.urlopen(req) as r:
              print(r.read().decode('utf-8'))
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daily-slack-summary
          path: |
            golden_report.txt
            gate_summary.txt
            out/kpi_history.jsonl

