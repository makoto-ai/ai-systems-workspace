name: Daily KPI Slack Summary

"on":
  schedule:
    - cron: '0 0 * * *'  # Daily 09:00 JST (00:00 UTC)
  workflow_dispatch: {}

jobs:
  daily-summary:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: daily-slack-summary
      cancel-in-progress: true
    env:
      PYTHON_VERSION: '3.11'
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore KPI history cache
        uses: actions/cache/restore@v4
        with:
          path: out/kpi_history.jsonl
          key: kpi-history-${{ github.run_id }}
          restore-keys: |
            kpi-history-

      - name: Restore SLO history cache
        uses: actions/cache/restore@v4
        with:
          path: out/slo_history.jsonl
          key: slo-history-${{ github.run_id }}
          restore-keys: |
            slo-history-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies (pinned)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt

      - name: Generate latest KPI and Gate summary
        run: |
          python scripts/quality/golden_coverage_report.py | tee golden_report.txt
          python scripts/quality/dynamic_gates.py --summary | tee gate_summary.txt

      - name: Save KPI history cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: out/kpi_history.jsonl
          key: kpi-history-${{ github.run_id }}

      - name: Post Slack (daily summary)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python - <<'PY'
          import json, os, time, urllib.request
          def read(p):
              try:
                  with open(p, 'r', encoding='utf-8') as f:
                      return f.read()
              except Exception:
                  return ''
          golden = read('golden_report.txt')
          gate = read('gate_summary.txt')
          payload = {
              "text": "Daily KPI Summary",
              "blocks": [
                  {"type":"header","text":{"type":"plain_text","text":"Daily KPI Summary"}},
                  {"type":"section","text":{"type":"mrkdwn","text":f"*Golden Coverage (latest)*\n```{golden}```"}},
                  {"type":"section","text":{"type":"mrkdwn","text":f"*Dynamic Gates*\n```{gate}```"}},
                  {"type":"context","elements":[{"type":"mrkdwn","text":f"run: {os.environ.get('GITHUB_RUN_ID','')} | repo: {os.environ.get('GITHUB_REPOSITORY','')}"}]}
              ]
          }
          url = os.environ.get('SLACK_WEBHOOK_URL','')
          if not url:
              print('SLACK_WEBHOOK_URL not set; skipping')
              raise SystemExit(0)
          start = time.time()
          status = 'fail'
          last_err = ''
          for i in range(3):
              try:
                  req = urllib.request.Request(url, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type':'application/json'})
                  with urllib.request.urlopen(req, timeout=10) as r:
                      body = r.read().decode('utf-8', 'ignore').strip()
                      print(body)
                      if body.lower() == 'ok':
                          status = 'ok'
                          break
              except Exception as e:
                  last_err = str(e)
                  print('post error:', e)
              time.sleep(2 * (i + 1))
          elapsed = int((time.time() - start) * 1000)
          # persist step-local result for later SLO logging
          with open('slo_result.json', 'w', encoding='utf-8') as f:
              json.dump({"status": status, "elapsed_ms": elapsed, "error": last_err}, f)
          PY

      - name: Record SLO sample
        run: |
          python - <<'PY'
          import json, time, os
          from pathlib import Path
          ts = int(time.time())
          res = {}
          try:
              res = json.loads(Path('slo_result.json').read_text('utf-8'))
          except Exception:
              res = {"status": "unknown", "elapsed_ms": -1}
          entry = {"timestamp": ts, "status": res.get("status","unknown"), "elapsed_ms": res.get("elapsed_ms", -1)}
          out = Path('out'); out.mkdir(parents=True, exist_ok=True)
          with (out / 'slo_history.jsonl').open('a', encoding='utf-8') as f:
              f.write(json.dumps(entry, ensure_ascii=False) + "\n")
          # Evaluate simple SLO: last 200 samples
          hist = []
          try:
              lines = (out / 'slo_history.jsonl').read_text('utf-8').strip().splitlines()[-200:]
              hist = [json.loads(x) for x in lines if x.strip()]
          except Exception:
              pass
          if hist:
              ok = sum(1 for x in hist if x.get('status') == 'ok')
              rate = 100.0 * ok / len(hist)
              latest = hist[-1]
              print(f"SLO window: n={len(hist)} success_rate={rate:.3f}% latest_elapsed_ms={latest.get('elapsed_ms',-1)}")
              if rate < 99.5 or latest.get('elapsed_ms', 0) > 300000:
                  print(f"::warning::SLO violation: success {rate:.3f}%, latest latency {latest.get('elapsed_ms',-1)}ms")
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daily-slack-summary
          path: |
            golden_report.txt
            gate_summary.txt
            out/kpi_history.jsonl
            out/slo_history.jsonl

