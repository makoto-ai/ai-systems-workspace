name: PR Quality Check - Golden Test Regression Guard

on:
  pull_request:
    branches: ["main", "master"]
    paths:
      - 'tests/golden/**'
      - 'experiments/**'
      - 'dashboard/**'
      - 'scripts/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  regression-guard:
    runs-on: ubuntu-latest
    # data-collectionラベル付きPRは通常ガードをスキップ
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'data-collection') }}

    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pyyaml

    - name: Setup environment
      run: |
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Run PR Branch Shadow Evaluation
      id: pr_eval
      run: |
        echo "🔍 PR Branch: Shadow evaluation実行中..."

        # PR版でマルチシャドー評価実行
        python tests/golden/runner.py \
          --threshold-shadow "0.70,0.75,0.80,0.85" \
          --weights tests/golden/weights_phase4.yaml \
          --report out/shadow_pr.json

        echo "✅ PR評価完了"

        # 結果抽出
        PR_PRED_70=$(python -c "
        import json
        with open('out/shadow_pr.json', 'r') as f:
            data = json.load(f)
        thresholds = data['multi_shadow_evaluation']['thresholds']
        rate = thresholds.get('0.70', {}).get('weighted_pass_rate', thresholds.get('0.70', {}).get('shadow_pass_rate', 0))
        print(f'{rate:.1f}')
        ")

        PR_PRED_85=$(python -c "
        import json
        with open('out/shadow_pr.json', 'r') as f:
            data = json.load(f)
        thresholds = data['multi_shadow_evaluation']['thresholds']
        rate = thresholds.get('0.85', {}).get('weighted_pass_rate', thresholds.get('0.85', {}).get('shadow_pass_rate', 0))
        print(f'{rate:.1f}')
        ")

        PR_FLAKY_RATE=$(python -c "
        import json
        with open('out/shadow_pr.json', 'r') as f:
            data = json.load(f)
        thresholds = data['multi_shadow_evaluation']['thresholds']
        rate = thresholds.get('0.85', {}).get('flaky_rate', 0) * 100
        print(f'{rate:.1f}')
        ")

        echo "pr_pred_70=${PR_PRED_70}" >> $GITHUB_OUTPUT
        echo "pr_pred_85=${PR_PRED_85}" >> $GITHUB_OUTPUT
        echo "pr_flaky_rate=${PR_FLAKY_RATE}" >> $GITHUB_OUTPUT

        echo "📊 PR結果: Pred@0.70=${PR_PRED_70}%, Pred@0.85=${PR_PRED_85}%, Flaky=${PR_FLAKY_RATE}%"

    - name: Checkout base branch (main) for baseline
      uses: actions/checkout@v4
      with:
        ref: main
        path: baseline

    - name: Run Baseline Shadow Evaluation
      id: baseline_eval
      working-directory: baseline
      run: |
        echo "🔍 Baseline (main): Shadow evaluation実行中..."

        # Python環境セットアップ
        pip install -r requirements.txt
        pip install pyyaml

        # ベースライン版でマルチシャドー評価実行
        python tests/golden/runner.py \
          --threshold-shadow "0.70,0.75,0.80,0.85" \
          --weights tests/golden/weights_phase4.yaml \
          --report out/shadow_baseline.json

        echo "✅ ベースライン評価完了"

        # 結果抽出
        BASELINE_PRED_70=$(python -c "
        import json
        with open('out/shadow_baseline.json', 'r') as f:
            data = json.load(f)
        thresholds = data['multi_shadow_evaluation']['thresholds']
        rate = thresholds.get('0.70', {}).get('weighted_pass_rate', thresholds.get('0.70', {}).get('shadow_pass_rate', 0))
        print(f'{rate:.1f}')
        ")

        BASELINE_PRED_85=$(python -c "
        import json
        with open('out/shadow_baseline.json', 'r') as f:
            data = json.load(f)
        thresholds = data['multi_shadow_evaluation']['thresholds']
        rate = thresholds.get('0.85', {}).get('weighted_pass_rate', thresholds.get('0.85', {}).get('shadow_pass_rate', 0))
        print(f'{rate:.1f}')
        ")

        BASELINE_FLAKY_RATE=$(python -c "
        import json
        with open('out/shadow_baseline.json', 'r') as f:
            data = json.load(f)
        thresholds = data['multi_shadow_evaluation']['thresholds']
        rate = thresholds.get('0.85', {}).get('flaky_rate', 0) * 100
        print(f'{rate:.1f}')
        ")

        echo "baseline_pred_70=${BASELINE_PRED_70}" >> $GITHUB_OUTPUT
        echo "baseline_pred_85=${BASELINE_PRED_85}" >> $GITHUB_OUTPUT
        echo "baseline_flaky_rate=${BASELINE_FLAKY_RATE}" >> $GITHUB_OUTPUT

        echo "📊 ベースライン: Pred@0.70=${BASELINE_PRED_70}%, Pred@0.85=${BASELINE_PRED_85}%, Flaky=${BASELINE_FLAKY_RATE}%"

        # 結果をPR側にコピー
        cp out/shadow_baseline.json ../out/

    - name: Regression Analysis
      id: regression_check
      run: |
        echo "🔍 回帰分析実行中..."

        PR_70=${{ steps.pr_eval.outputs.pr_pred_70 }}
        PR_85=${{ steps.pr_eval.outputs.pr_pred_85 }}
        PR_FLAKY=${{ steps.pr_eval.outputs.pr_flaky_rate }}

        BASELINE_70=${{ steps.baseline_eval.outputs.baseline_pred_70 }}
        BASELINE_85=${{ steps.baseline_eval.outputs.baseline_pred_85 }}
        BASELINE_FLAKY=${{ steps.baseline_eval.outputs.baseline_flaky_rate }}

        # 差分計算（bashでの浮動小数点演算）
        DIFF_70=$(python -c "print(${PR_70} - ${BASELINE_70})")
        DIFF_85=$(python -c "print(${PR_85} - ${BASELINE_85})")
        DIFF_FLAKY=$(python -c "print(${PR_FLAKY} - ${BASELINE_FLAKY})")

        echo "📊 Performance Diff Analysis:"
        echo "  Pred@0.70: ${BASELINE_70}% → ${PR_70}% (${DIFF_70:+}pp)"
        echo "  Pred@0.85: ${BASELINE_85}% → ${PR_85}% (${DIFF_85:+}pp)"
        echo "  Flaky Rate: ${BASELINE_FLAKY}% → ${PR_FLAKY}% (${DIFF_FLAKY:+}pp)"

        # 回帰判定
        REGRESSION_DETECTED=false
        REGRESSION_REASONS=()

        # Pred@0.70が1.0pp以上悪化
        if (( $(echo "${DIFF_70} < -1.0" | bc -l) )); then
          REGRESSION_DETECTED=true
          REGRESSION_REASONS+=("Pred@0.70が${DIFF_70}pp悪化（-1.0pp閾値）")
        fi

        # Pred@0.85が1.0pp以上悪化
        if (( $(echo "${DIFF_85} < -1.0" | bc -l) )); then
          REGRESSION_DETECTED=true
          REGRESSION_REASONS+=("Pred@0.85が${DIFF_85}pp悪化（-1.0pp閾値）")
        fi

        # Flaky率が2.0pp以上増加
        if (( $(echo "${DIFF_FLAKY} > 2.0" | bc -l) )); then
          REGRESSION_DETECTED=true
          REGRESSION_REASONS+=("Flaky率が${DIFF_FLAKY}pp増加（+2.0pp閾値）")
        fi

        # 結果出力
        echo "regression_detected=${REGRESSION_DETECTED}" >> $GITHUB_OUTPUT
        echo "diff_70=${DIFF_70}" >> $GITHUB_OUTPUT
        echo "diff_85=${DIFF_85}" >> $GITHUB_OUTPUT
        echo "diff_flaky=${DIFF_FLAKY}" >> $GITHUB_OUTPUT

        # 回帰理由をJSONで保存
        if [ "$REGRESSION_DETECTED" = true ]; then
          printf '%s\n' "${REGRESSION_REASONS[@]}" > regression_reasons.txt
          echo "❌ 回帰検出！理由:"
          cat regression_reasons.txt | sed 's/^/  - /'
        else
          echo "✅ 回帰なし - PR承認可能"
        fi

    - name: Quality Gate Check
      id: quality_gate
      run: |
        echo "🔍 品質ゲートチェック中..."

        REGRESSION=${{ steps.regression_check.outputs.regression_detected }}

        if [ "$REGRESSION" = "true" ]; then
          echo "quality_gate_passed=false" >> $GITHUB_OUTPUT
          echo "❌ 品質ゲート: FAILED"
          exit 1
        else
          echo "quality_gate_passed=true" >> $GITHUB_OUTPUT
          echo "✅ 品質ゲート: PASSED"
        fi

    - name: Update PR with Regression Analysis
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const regressionDetected = '${{ steps.regression_check.outputs.regression_detected }}' === 'true';
          const qualityGatePassed = '${{ steps.quality_gate.outputs.quality_gate_passed }}' === 'true';

          const diff70 = parseFloat('${{ steps.regression_check.outputs.diff_70 }}');
          const diff85 = parseFloat('${{ steps.regression_check.outputs.diff_85 }}');
          const diffFlaky = parseFloat('${{ steps.regression_check.outputs.diff_flaky }}');

          const prPred70 = '${{ steps.pr_eval.outputs.pr_pred_70 }}';
          const prPred85 = '${{ steps.pr_eval.outputs.pr_pred_85 }}';
          const baselinePred70 = '${{ steps.baseline_eval.outputs.baseline_pred_70 }}';
          const baselinePred85 = '${{ steps.baseline_eval.outputs.baseline_pred_85 }}';

          let statusEmoji = '✅';
          let statusText = '品質ゲート: PASSED';
          let alertLevel = 'info';

          if (regressionDetected) {
            statusEmoji = '❌';
            statusText = '品質ゲート: FAILED - 回帰検出';
            alertLevel = 'error';
          }

          const commentBody = `## ${statusEmoji} PR品質チェック結果

          ### 📊 Performance Impact Analysis

          | Metric | Baseline | PR | Diff | Status |
          |--------|----------|----|----|-------|
          | Pred@0.70 | ${baselinePred70}% | ${prPred70}% | ${diff70:+.1f}pp | ${diff70 >= -1.0 ? '✅' : '❌'} |
          | Pred@0.85 | ${baselinePred85}% | ${prPred85}% | ${diff85:+.1f}pp | ${diff85 >= -1.0 ? '✅' : '❌'} |
          | Flaky Rate | ${{ steps.baseline_eval.outputs.baseline_flaky_rate }}% | ${{ steps.pr_eval.outputs.pr_flaky_rate }}% | ${diffFlaky:+.1f}pp | ${diffFlaky <= 2.0 ? '✅' : '❌'} |

          ### 🚦 Quality Gate Rules
          - **Pred@0.70**: 悪化は-1.0pp以内
          - **Pred@0.85**: 悪化は-1.0pp以内
          - **Flaky Rate**: 増加は+2.0pp以内

          ${regressionDetected ? `
          ### ❌ 回帰検出理由
          ${require('fs').existsSync('regression_reasons.txt') ? require('fs').readFileSync('regression_reasons.txt', 'utf8').split('\n').filter(line => line).map(line => `- ${line}`).join('\n') : ''}

          **このPRは品質ゲートを通過していません。回帰を修正してください。**
          ` : `
          ### ✅ 品質ゲート通過
          このPRは回帰チェックを通過しました。安全にマージできます。
          `}

          ### 🔍 詳細データ
          - PR評価レポート: \`out/shadow_pr.json\`
          - ベースライン評価: \`out/shadow_baseline.json\`
          - 実行ID: \`${process.env.GITHUB_RUN_ID}\`
          `;

          // PR にコメントを追加/更新
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });

          const botComment = comments.find(comment =>
            comment.user.login === 'github-actions[bot]' &&
            comment.body.includes('PR品質チェック結果')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }

          // 回帰検出時はPRをドラフトに変更する検討
          if (regressionDetected) {
            console.log('❌ 回帰検出によりCI失敗');
          }

    - name: Archive Quality Check Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pr-quality-check-results
        path: |
          out/shadow_pr.json
          out/shadow_baseline.json
          regression_reasons.txt
        retention-days: 30

    - name: Fail CI on Regression
      if: steps.regression_check.outputs.regression_detected == 'true'
      run: |
        echo "❌ CI失敗: 品質ゲートでの回帰検出により、このPRはマージできません"
        exit 1

  # データ収集専用: サマリー生成は常に実行
  data-collection-summary:
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pyyaml

    - name: Setup environment
      run: |
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV

    - name: Run Shadow Grid Evaluation
      run: |
        echo "📊 Shadow Grid評価実行（データ収集用）"
        python tests/golden/runner.py \
          --threshold-shadow "0.70,0.72,0.75,0.80,0.85" \
          --weights tests/golden/weights_phase4.yaml \
          --report out/shadow_grid.json

    - name: Archive Shadow Results
      uses: actions/upload-artifact@v4
      with:
        name: shadow-grid-data-collection
        path: out/shadow_grid.json
        retention-days: 30

    - name: Early Abort Check
      if: contains(github.event.pull_request.labels.*.name, 'data-collection')
      id: abort_check
      run: |
        echo "🔍 早期Abort判定実行"
        python scripts/decide_abort.py \
          --shadow out/shadow_grid.json \
          --threshold 0.72 \
          --hard-min-pass 0.65 \
          --hard-max-new 0.70

        # 結果を出力に保存
        echo "abort=$ABORT" >> $GITHUB_OUTPUT
        echo "reason=$ABORT_REASON" >> $GITHUB_OUTPUT

    - name: Close PR if Abort
      if: |
        contains(github.event.pull_request.labels.*.name, 'data-collection') &&
        steps.abort_check.outputs.abort == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const reason = process.env.ABORT_REASON || '早期Abort条件に該当';

          // コメント追加
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: `🛑 **早期Abort: データ収集完了**\n\n${reason}\n\nこのPRは自動的にクローズされます。収集されたデータは以下から確認できます:\n- Shadow Grid結果: Artifactsタブ\n- 詳細分析: Actionsログ`
          });

          // PRクローズ
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber,
            state: 'closed'
          });

          console.log(`✅ PR #${prNumber} を早期Abortによりクローズしました`);

    - name: Notify Slack (Data Collection)
      if: always()
      continue-on-error: true
      run: |
        SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "⏭️ Slack通知スキップ（SLACK_WEBHOOK_URL未設定）"
          exit 0
        fi
        echo "📢 データ収集結果をSlack通知"
        python scripts/notify_results.py \
          --data-collection \
          --action-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --pr-url "${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
