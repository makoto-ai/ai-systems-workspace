name: "🔮 Predictive Quality Assurance"

on:
  push:
    paths:
    - '.github/workflows/**'
    - 'scripts/**'
    - '**/*.py'
    - '**/*.yml'
  pull_request:
    branches: ["main", "master"]
    paths:
    - '.github/workflows/**'
    - 'scripts/**'
  schedule:
  # 毎日朝9時(JST)に予防チェック実行
  - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      prediction_days:
        description: 'Prediction horizon (days)'
        required: false
        default: '7'
      apply_fixes:
        description: 'Apply preventive fixes'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  predictive-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 50  # 予測分析のため履歴を取得

    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "📦 Install dependencies"
      run: |
        pip install -r requirements.txt
        pip install pyyaml

    - name: "🔮 Run Issue Prediction"
      id: predict
      run: |
        echo "🔮 Running predictive analysis..."

        PREDICTION_DAYS="${{ github.event.inputs.prediction_days || '7' }}"

        # 予測エンジン実行
        python scripts/quality/issue_predictor.py --prediction-days "${PREDICTION_DAYS}"

        # 予測結果の解析
        if [ -f "out/issue_predictions.json" ]; then
          TOTAL_HIGH_RISK=$(jq '.risk_assessment.total_high_risk' out/issue_predictions.json)
          TOTAL_MEDIUM_RISK=$(jq '.risk_assessment.total_medium_risk' out/issue_predictions.json)
          OVERALL_RISK=$(jq -r '.risk_assessment.overall_risk_level' out/issue_predictions.json)

          {
            echo "high_risk_count=${TOTAL_HIGH_RISK}"
            echo "medium_risk_count=${TOTAL_MEDIUM_RISK}"
            echo "overall_risk=${OVERALL_RISK}"
          } >> "$GITHUB_OUTPUT"

          echo "📊 Prediction Results:"
          echo "  High Risk Issues: ${TOTAL_HIGH_RISK}"
          echo "  Medium Risk Issues: ${TOTAL_MEDIUM_RISK}"
          echo "  Overall Risk Level: ${OVERALL_RISK}"
        else
          echo "❌ Prediction file not generated"
          exit 1
        fi

    - name: "🛡️ Apply Preventive Fixes"
      id: prevent
      if: ${{ github.event.inputs.apply_fixes == 'true' || steps.predict.outputs.overall_risk == 'high' }}
      run: |
        echo "🛡️ Applying preventive fixes..."

        # バックアップディレクトリの確保
        mkdir -p backup/preventive_fixes

        # 予防修正の実行
        python scripts/quality/preventive_fixer.py

        # 修正結果の確認
        if [ -f "out/preventive_fixes.json" ]; then
          FIXES_APPLIED=$(jq '.fixes_applied' out/preventive_fixes.json)
          SUCCESS_RATE=$(jq '.success_rate' out/preventive_fixes.json)

          {
            echo "fixes_applied=${FIXES_APPLIED}"
            echo "success_rate=${SUCCESS_RATE}"
          } >> "$GITHUB_OUTPUT"

          echo "🔧 Preventive Fixes Summary:"
          echo "  Fixes Applied: ${FIXES_APPLIED}"
          echo "  Success Rate: ${SUCCESS_RATE}"

          # 修正があった場合はファイル変更をコミット対象として記録
          if [ "${FIXES_APPLIED}" -gt 0 ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi
        fi

    - name: "🧪 Validate Applied Fixes"
      if: ${{ steps.prevent.outputs.has_changes == 'true' }}
      run: |
        echo "🧪 Validating applied fixes..."

        # YAML構文チェック
        if command -v yamllint >/dev/null 2>&1; then
          echo "📋 Running YAML validation..."
          yamllint .github/workflows/ || echo "⚠️ YAML validation warnings detected"
        fi

        # 基本的な構文チェック
        echo "🔍 Running basic syntax checks..."

        # GitHub Actions workflow validation
        for workflow in .github/workflows/*.yml; do
          echo "  Checking: $workflow"
          # 基本的な構文エラーをチェック
          if ! python -c "import yaml; yaml.safe_load(open('$workflow'))" 2>/dev/null; then
            echo "  ❌ Syntax error in $workflow"
            exit 1
          else
            echo "  ✅ $workflow is valid"
          fi
        done

    - name: "📊 Generate Quality Report"
      run: |
        echo "📊 Generating comprehensive quality report..."

        # Phase 1 システムとの統合分析
        python scripts/dashboard/learning_insights.py
        python scripts/quality/health_monitor.py

        # 統合レポートの作成
        cat > out/predictive_quality_report.md << 'EOF'
        # 🔮 Predictive Quality Assurance Report

        ## 📅 Analysis Date
        $(date -Iseconds)

        ## 🎯 Prediction Summary
        - **Prediction Horizon**: ${{ github.event.inputs.prediction_days || '7' }} days
        - **Overall Risk Level**: ${{ steps.predict.outputs.overall_risk }}
        - **High Risk Issues**: ${{ steps.predict.outputs.high_risk_count }}
        - **Medium Risk Issues**: ${{ steps.predict.outputs.medium_risk_count }}

        ## 🛡️ Preventive Actions
        EOF

        FIXES_APPLIED="${{ steps.prevent.outputs.fixes_applied || '0' }}"
        if [ "${FIXES_APPLIED}" -gt 0 ]; then
          cat >> out/predictive_quality_report.md << 'EOF'
        - **Fixes Applied**: ${{ steps.prevent.outputs.fixes_applied }}
        - **Success Rate**: ${{ steps.prevent.outputs.success_rate }}
        - **Status**: ✅ Preventive fixes applied successfully
        EOF
        else
          cat >> out/predictive_quality_report.md << 'EOF'
        - **Status**: ℹ️ No preventive fixes required
        - **System Health**: Stable
        EOF
        fi

        cat >> out/predictive_quality_report.md << 'EOF'

        ## 🚀 System Status
        - **Learning System**: Active
        - **Pattern Recognition**: Enabled
        - **Continuous Monitoring**: Operational

        ## 📁 Generated Files
        - `out/issue_predictions.json` - Detailed predictions
        - `out/preventive_fixes.json` - Applied fixes log
        - `out/learning_insights.json` - Learning analytics
        - `out/system_health.json` - System health status

        ---
        *Report generated by Predictive Quality Assurance System*
        EOF

        echo "📄 Quality report generated: out/predictive_quality_report.md"

    - name: "💾 Archive Results"
      uses: actions/upload-artifact@v4
      with:
        name: "predictive-quality-results-${{ github.run_number }}"
        path: |
          out/issue_predictions.json
          out/preventive_fixes.json
          out/predictive_quality_report.md
          out/learning_insights.json
          out/system_health.json
          backup/preventive_fixes/
        retention-days: 30

    - name: "📝 Comment on PR (if applicable)"
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // 予測結果の読み込み
          let predictionData = {};
          try {
            predictionData = JSON.parse(fs.readFileSync('out/issue_predictions.json', 'utf8'));
          } catch (error) {
            console.log('No prediction data available');
          }

          const overallRisk = '${{ steps.predict.outputs.overall_risk }}';
          const highRiskCount = '${{ steps.predict.outputs.high_risk_count }}';
          const mediumRiskCount = '${{ steps.predict.outputs.medium_risk_count }}';
          const fixesApplied = '${{ steps.prevent.outputs.fixes_applied || '0' }}';

          const riskEmoji = overallRisk === 'high' ? '🔴' : overallRisk === 'medium' ? '🟡' : '🟢';

          const commentBody = `## 🔮 Predictive Quality Analysis

          ### ${riskEmoji} Overall Risk Assessment: **${overallRisk.toUpperCase()}**

          | Metric | Count |
          |--------|-------|
          | High Risk Issues | ${highRiskCount} |
          | Medium Risk Issues | ${mediumRiskCount} |
          | Preventive Fixes Applied | ${fixesApplied} |

          ### 🛡️ Preventive Actions
          ${parseInt(fixesApplied) > 0 ?
            '✅ Preventive fixes have been applied to mitigate predicted issues.' :
            'ℹ️ No preventive fixes required at this time.'}

          ### 📊 Quality Insights
          - **Prediction Horizon**: ${{ github.event.inputs.prediction_days || '7' }} days
          - **Analysis Timestamp**: ${new Date().toISOString()}
          - **Learning System**: Active and monitoring

          > 💡 This analysis uses historical data and pattern recognition
          > to predict and prevent potential issues before they occur.

          📁 **Detailed Results**: Check the workflow artifacts for comprehensive reports.
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    - name: "🚨 High Risk Alert"
      if: ${{ steps.predict.outputs.overall_risk == 'high' }}
      run: |
        echo "🚨 HIGH RISK DETECTED!"
        echo "=============================="
        echo ""
        echo "⚠️ The predictive analysis has detected HIGH RISK conditions."
        echo "📊 High Risk Issues: ${{ steps.predict.outputs.high_risk_count }}"
        echo "🔧 Preventive fixes applied: ${{ steps.prevent.outputs.fixes_applied || '0' }}"
        echo ""
        echo "🔍 Review the detailed predictions in the artifacts."
        echo "🛡️ Consider implementing additional preventive measures."
        echo ""
        echo "📄 Full analysis: out/issue_predictions.json"

    - name: "✅ Success Summary"
      if: always()
      run: |
        echo "🎯 Predictive Quality Assurance Complete"
        echo "========================================"
        echo ""
        echo "📊 Analysis Results:"
        echo "  Overall Risk: ${{ steps.predict.outputs.overall_risk }}"
        echo "  High Risk Issues: ${{ steps.predict.outputs.high_risk_count }}"
        echo "  Medium Risk Issues: ${{ steps.predict.outputs.medium_risk_count }}"
        echo "  Preventive Fixes: ${{ steps.prevent.outputs.fixes_applied || '0' }}"
        echo ""
        echo "🚀 System Status: Monitoring and learning continuously"
        echo "📁 Results archived as workflow artifacts"
