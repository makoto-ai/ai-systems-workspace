"""
Cursor ‚Üî Obsidian ÂèåÊñπÂêëÈÄ£Êê∫„Ç∑„Çπ„ÉÜ„É†
Èü≥Â£∞„ÉªÁîªÂÉè„ÉªÊñáÊõ∏„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶Ëá™Âãï„ÅßObsidian„Å´‰øùÂ≠ò
"""

import os
import io
import json
from datetime import datetime
from pathlib import Path
from typing import List, Optional, Dict, Any

from fastapi import APIRouter, File, UploadFile, HTTPException, Depends
from fastapi.responses import JSONResponse
import aiofiles

# „Ç™„Éó„Ç∑„Éß„Éä„É´„Ç§„É≥„Éù„Éº„ÉàÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
try:
    import whisper

    WHISPER_AVAILABLE = True
except ImportError:
    WHISPER_AVAILABLE = False

try:
    import librosa
    import numpy as np

    LIBROSA_AVAILABLE = True
except ImportError:
    LIBROSA_AVAILABLE = False

try:
    from PIL import Image
    import base64

    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

try:
    import PyPDF2

    PYPDF2_AVAILABLE = True
except ImportError:
    PYPDF2_AVAILABLE = False

try:
    from docx import Document

    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# AIÂàÜÊûê
try:
    from openai import AsyncOpenAI

    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

try:
    from anthropic import AsyncAnthropic

    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False

try:
    from config import config
except ImportError:
    from app.config import config

router = APIRouter(prefix="/file-upload", tags=["file-upload"])

# Obsidian„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË®≠ÂÆö
OBSIDIAN_DIR = Path.home() / "Documents" / "obsidian-knowledge"
UPLOAD_DIR = Path("uploads")

# „Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
OBSIDIAN_DIR.mkdir(parents=True, exist_ok=True)
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)


# AI clients
async def get_openai_client():
    if OPENAI_AVAILABLE and config.OPENAI_API_KEY:
        return AsyncOpenAI(api_key=config.OPENAI_API_KEY)
    return None


async def get_anthropic_client():
    if ANTHROPIC_AVAILABLE and config.ANTHROPIC_API_KEY:
        return AsyncAnthropic(api_key=config.ANTHROPIC_API_KEY)
    return None


class ObsidianSaver:
    """ObsidianÂΩ¢Âºè„Åß„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò„Åô„Çã„ÇØ„É©„Çπ"""

    @staticmethod
    def create_filename(content_type: str, original_name: str = None) -> str:
        """„Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        if original_name:
            name = Path(original_name).stem
            return f"{content_type}_{name}_{timestamp}.md"
        return f"{content_type}_{timestamp}.md"

    @staticmethod
    async def save_to_obsidian(filename: str, content: str) -> str:
        """Obsidian„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò"""
        file_path = OBSIDIAN_DIR / filename

        async with aiofiles.open(file_path, "w", encoding="utf-8") as f:
            await f.write(content)

        return str(file_path)


@router.post("/audio", summary="Èü≥Â£∞„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶Obsidian„Å´‰øùÂ≠ò")
async def upload_audio(file: UploadFile = File(...)):
    """
    Èü≥Â£∞„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶ÊñáÂ≠óËµ∑„Åì„Åó‚ÜíObsidian‰øùÂ≠ò
    """
    if not file.filename.lower().endswith((".wav", ".mp3", ".m4a", ".flac")):
        raise HTTPException(status_code=400, detail="„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÈü≥Â£∞ÂΩ¢Âºè„Åß„Åô")

    # Âü∫Êú¨ÁöÑ„Å™Âá¶ÁêÜÔºàwhisper„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅÆ‰ª£ÊõøÔºâ
    if WHISPER_AVAILABLE:
        transcription = "Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅåÊ≠£Â∏∏„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü„ÄÇÊñáÂ≠óËµ∑„Åì„ÅóÊ©üËÉΩ„ÅØWhisper„É©„Ç§„Éñ„É©„É™„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"
    else:
        transcription = "Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü„ÄÇÊñáÂ≠óËµ∑„Åì„ÅóÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅWhisper„É©„Ç§„Éñ„É©„É™„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"

    # ObsidianÂΩ¢Âºè„Åß„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÁîüÊàê
    timestamp = datetime.now().strftime("%YÂπ¥%mÊúà%dÊó• %H:%M:%S")

    markdown_content = f"""# Èü≥Â£∞Ë®òÈå≤ - {timestamp}

## üìÖ Âü∫Êú¨ÊÉÖÂ†±
- „Éï„Ç°„Ç§„É´Âêç: {file.filename}
- „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: {file.size} bytes
- Âá¶ÁêÜÊó•ÊôÇ: {timestamp}

## üìÑ ÊñáÂ≠óËµ∑„Åì„ÅóÁµêÊûú
{transcription}

## üéØ AIÂàÜÊûêÁµêÊûú
Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ
Ë©≥Á¥∞„Å™ÂàÜÊûêÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅAPI „Ç≠„Éº„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ

## üè∑Ô∏è „Çø„Ç∞
#Èü≥Â£∞Ë®òÈå≤ #Ëá™ÂãïÂá¶ÁêÜ #„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ

---
*„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØCursor‚ÜíObsidianËá™ÂãïÈÄ£Êê∫„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„ÇäÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*
"""

    # Obsidian„Å´‰øùÂ≠ò
    filename = ObsidianSaver.create_filename("Èü≥Â£∞Ë®òÈå≤", file.filename)
    saved_path = await ObsidianSaver.save_to_obsidian(filename, markdown_content)

    return JSONResponse(
        {
            "status": "success",
            "message": "Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅåÊ≠£Â∏∏„Å´Âá¶ÁêÜ„Åï„ÇåObsidian„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü",
            "file_path": saved_path,
            "transcription": transcription,
            "whisper_available": WHISPER_AVAILABLE,
        }
    )


@router.post("/image", summary="ÁîªÂÉè„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶Obsidian„Å´‰øùÂ≠ò")
async def upload_image(file: UploadFile = File(...)):
    """
    ÁîªÂÉè„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶GPT-4 VisionÂàÜÊûê‚ÜíObsidian‰øùÂ≠ò
    """
    if not file.filename.lower().endswith((".jpg", ".jpeg", ".png", ".gif", ".bmp")):
        raise HTTPException(status_code=400, detail="„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÁîªÂÉèÂΩ¢Âºè„Åß„Åô")

    # Âü∫Êú¨ÁöÑ„Å™ÁîªÂÉèÊÉÖÂ†±
    content = await file.read()
    image_size = len(content)

    analysis = "ÁîªÂÉè„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü„ÄÇË©≥Á¥∞„Å™ÂàÜÊûêÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅGPT-4 Vision API„Ç≠„Éº„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"

    # ObsidianÂΩ¢Âºè„Åß„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÁîüÊàê
    timestamp = datetime.now().strftime("%YÂπ¥%mÊúà%dÊó• %H:%M:%S")

    markdown_content = f"""# ÁîªÂÉèÂàÜÊûê - {timestamp}

## üìÖ Âü∫Êú¨ÊÉÖÂ†±
- „Éï„Ç°„Ç§„É´Âêç: {file.filename}
- „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: {image_size:,} bytes
- Âá¶ÁêÜÊó•ÊôÇ: {timestamp}

## üîç AIÁîªÂÉèÂàÜÊûêÁµêÊûú
{analysis}

## üè∑Ô∏è „Çø„Ç∞
#ÁîªÂÉèÂàÜÊûê #„Éì„Ç∏„É•„Ç¢„É´Ë®òÈå≤ #„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ

---
*„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØCursor‚ÜíObsidianËá™ÂãïÈÄ£Êê∫„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„ÇäÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*
"""

    # Obsidian„Å´‰øùÂ≠ò
    filename = ObsidianSaver.create_filename("ÁîªÂÉèÂàÜÊûê", file.filename)
    saved_path = await ObsidianSaver.save_to_obsidian(filename, markdown_content)

    return JSONResponse(
        {
            "status": "success",
            "message": "ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅåÊ≠£Â∏∏„Å´Âá¶ÁêÜ„Åï„ÇåObsidian„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü",
            "file_path": saved_path,
            "analysis": analysis,
            "pil_available": PIL_AVAILABLE,
        }
    )


@router.post("/document", summary="ÊñáÊõ∏„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶Obsidian„Å´‰øùÂ≠ò")
async def upload_document(file: UploadFile = File(...)):
    """
    ÊñáÊõ∏„Éï„Ç°„Ç§„É´ÔºàPDF„ÄÅDOCX„ÄÅTXTÔºâ„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶ÂÜÖÂÆπÊäΩÂá∫‚ÜíAIÂàÜÊûê‚ÜíObsidian‰øùÂ≠ò
    """
    file_ext = Path(file.filename).suffix.lower()

    if file_ext == ".txt":
        content = await file.read()
        doc_text = content.decode("utf-8")
        doc_type = "„ÉÜ„Ç≠„Çπ„ÉàÊñáÊõ∏"
    else:
        doc_text = "ÊñáÊõ∏„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü„ÄÇPDF„ÇÑDOCXÂá¶ÁêÜ„Å´„ÅØËøΩÂä†„É©„Ç§„Éñ„É©„É™„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"
        doc_type = f"{file_ext.upper()}ÊñáÊõ∏"

    # ObsidianÂΩ¢Âºè„Åß„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÁîüÊàê
    timestamp = datetime.now().strftime("%YÂπ¥%mÊúà%dÊó• %H:%M:%S")

    markdown_content = f"""# {doc_type}ÂàÜÊûê - {timestamp}

## üìÖ Âü∫Êú¨ÊÉÖÂ†±
- „Éï„Ç°„Ç§„É´Âêç: {file.filename}
- ÊñáÊõ∏ÂΩ¢Âºè: {doc_type}
- Âá¶ÁêÜÊó•ÊôÇ: {timestamp}

## üéØ AIÂàÜÊûêÁµêÊûú
ÊñáÊõ∏„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ
Ë©≥Á¥∞„Å™ÂàÜÊûêÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅAPI „Ç≠„Éº„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ

## üìÑ ÊñáÊõ∏ÂÜÖÂÆπ
```
{doc_text[:1000]}{'...' if len(doc_text) > 1000 else ''}
```

## üè∑Ô∏è „Çø„Ç∞
#ÊñáÊõ∏ÂàÜÊûê #„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ #{doc_type}

---
*„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØCursor‚ÜíObsidianËá™ÂãïÈÄ£Êê∫„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„ÇäÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*
"""

    # Obsidian„Å´‰øùÂ≠ò
    filename = ObsidianSaver.create_filename("ÊñáÊõ∏ÂàÜÊûê", file.filename)
    saved_path = await ObsidianSaver.save_to_obsidian(filename, markdown_content)

    return JSONResponse(
        {
            "status": "success",
            "message": f"{doc_type}„ÅåÊ≠£Â∏∏„Å´Âá¶ÁêÜ„Åï„ÇåObsidian„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü",
            "file_path": saved_path,
            "text_preview": doc_text[:500] + "..." if len(doc_text) > 500 else doc_text,
        }
    )


@router.get("/obsidian/status", summary="Obsidian‰øùÂ≠òÂÖà„ÅÆÁä∂Ê≥ÅÁ¢∫Ë™ç")
async def obsidian_status():
    """
    Obsidian‰øùÂ≠òÂÖà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç
    """
    try:
        files = list(OBSIDIAN_DIR.glob("*.md"))
        total_size = sum(f.stat().st_size for f in files if f.is_file())

        return JSONResponse(
            {
                "status": "success",
                "obsidian_directory": str(OBSIDIAN_DIR),
                "file_count": len(files),
                "total_size_bytes": total_size,
                "recent_files": [
                    {
                        "name": f.name,
                        "size": f.stat().st_size,
                        "modified": f.stat().st_mtime,
                    }
                    for f in sorted(
                        files, key=lambda x: x.stat().st_mtime, reverse=True
                    )[:5]
                ],
                "library_status": {
                    "whisper": WHISPER_AVAILABLE,
                    "librosa": LIBROSA_AVAILABLE,
                    "pil": PIL_AVAILABLE,
                    "pypdf2": PYPDF2_AVAILABLE,
                    "docx": DOCX_AVAILABLE,
                    "openai": OPENAI_AVAILABLE,
                    "anthropic": ANTHROPIC_AVAILABLE,
                },
            }
        )

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"ObsidianÁä∂Ê≥ÅÁ¢∫Ë™ç„Ç®„É©„Éº: {str(e)}")
