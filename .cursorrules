# Cursor AI Behavioral Rules
# プロジェクト最適化ルール

## 🎯 システム認識ルール

### 既存システムの確認
- 新しいシステムを作成する前に必ずcodebase_searchで既存システムを確認
- 重複システムの作成を防ぐため、関連ファイルを徹底調査
- 既存の高度なアーキテクチャ（FastAPI + Next.js + AI統合等）を尊重

### ファイル編集ルール
- 既存ファイルの編集を優先し、新規作成は最小限に
- 特に.github/workflows/配下は既存の高度なワークフローが存在
- package.json、tsconfig.json、設定ファイルは慎重に扱う

## 🔧 品質管理ルール

### 段階的改善アプローチ
- 大規模な変更ではなく、段階的・継続的改善を実施
- データ蓄積→分析→改善のサイクルを重視
- 学習システム（logs/, out/）のデータを活用

### エラー解消優先順位
1. YAML構文エラー（yamllint）
2. GitHub Actions構文エラー（actionlint）  
3. Shell構文エラー（shellcheck）
4. IDE拡張機能警告
5. 品質改善提案

## 📊 データ活用ルール

### 学習データの尊重
- logs/project_events.jsonl（2MB+）の蓄積データを活用
- out/*.jsonの品質分析データを参考にする
- adaptive_guidance.json等の学習結果を反映

### 継続改善サイクル
- 毎回の作業でデータを蓄積
- 過去の成功パターンを学習・適用
- 失敗パターンの回避策を実装

## ⚙️ IDE最適化ルール

### VS Code設定の活用
- .vscode/settings.jsonの設定を遵守
- YAML拡張機能の設定を尊重
- GitHub Actions拡張機能の最適化を維持

### リンター設定の統一
- .yamllintの設定に従う
- .editorconfigの統一ルールを適用
- actionlint, shellcheckの結果を尊重

## 🚀 実装方針

### 安全第一
- 既存システムの破壊を避ける
- バックアップ・復元可能な変更を心がける
- 段階的テスト・検証を実施

### ユーザー協調
- ユーザーの修正・貢献を尊重
- 共同作業での役割分担を明確化
- 進捗状況の透明な共有

## 📋 禁止事項

### 作成禁止
- 既存システムと重複する新規システム
- 不要な設定ファイルの乱立
- 一時的・テスト用ファイルの残置

### 変更禁止
- 動作中の学習システムの中断
- ユーザー固有設定の無断変更
- 本番環境に影響する危険な変更

## 🎯 最終目標

IDEレベルでの警告完全解消を目指し、
学習データを活用した継続的品質改善システムの完成




